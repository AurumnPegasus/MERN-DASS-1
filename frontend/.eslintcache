[{"/home/shivansh/Desktop/mern1/frontend/src/index.js":"1","/home/shivansh/Desktop/mern1/frontend/src/App.js":"2","/home/shivansh/Desktop/mern1/frontend/src/components/layout/Landing.js":"3","/home/shivansh/Desktop/mern1/frontend/src/components/layout/Navbar.js":"4","/home/shivansh/Desktop/mern1/frontend/src/components/auth/Register.js":"5","/home/shivansh/Desktop/mern1/frontend/src/components/auth/Login.js":"6","/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Profile.js":"7","/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Navbar.js":"8","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/index.js":"9","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/App.js":"10","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Landing.js":"11","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Navbar.js":"12","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Register.js":"13","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Login.js":"14","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/Context.js":"15","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Profile.js":"16","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Navbar.js":"17","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/EditProfile.js":"18","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/RProfile.js":"19","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/Navbar.js":"20","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/REditProfile.js":"21","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/ViewJob.js":"22","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/CreateJob.js":"23","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/EditJob.js":"24","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/ViewJob.js":"25"},{"size":147,"mtime":1610408903437,"results":"26","hashOfConfig":"27"},{"size":806,"mtime":1610647411283,"results":"28","hashOfConfig":"27"},{"size":1677,"mtime":1610529769715,"results":"29","hashOfConfig":"27"},{"size":598,"mtime":1610646195569,"results":"30","hashOfConfig":"27"},{"size":6518,"mtime":1610646241621,"results":"31","hashOfConfig":"27"},{"size":3247,"mtime":1610649141557,"results":"32","hashOfConfig":"27"},{"size":231,"mtime":1610648534312,"results":"33","hashOfConfig":"27"},{"size":1528,"mtime":1610647390939,"results":"34","hashOfConfig":"27"},{"size":147,"mtime":1610894797641,"results":"35","hashOfConfig":"36"},{"size":2628,"mtime":1611274742520,"results":"37","hashOfConfig":"36"},{"size":1677,"mtime":1610894797641,"results":"38","hashOfConfig":"36"},{"size":598,"mtime":1610894797641,"results":"39","hashOfConfig":"36"},{"size":6518,"mtime":1611336741540,"results":"40","hashOfConfig":"36"},{"size":3790,"mtime":1611120198262,"results":"41","hashOfConfig":"36"},{"size":75,"mtime":1611142799428,"results":"42","hashOfConfig":"36"},{"size":4403,"mtime":1611136627499,"results":"43","hashOfConfig":"36"},{"size":1126,"mtime":1611271562850,"results":"44","hashOfConfig":"36"},{"size":7709,"mtime":1611137048414,"results":"45","hashOfConfig":"36"},{"size":4007,"mtime":1611136292575,"results":"46","hashOfConfig":"36"},{"size":1153,"mtime":1611140374907,"results":"47","hashOfConfig":"36"},{"size":4901,"mtime":1611136624059,"results":"48","hashOfConfig":"36"},{"size":5089,"mtime":1611274581448,"results":"49","hashOfConfig":"36"},{"size":10039,"mtime":1611222629001,"results":"50","hashOfConfig":"36"},{"size":10193,"mtime":1611274047274,"results":"51","hashOfConfig":"36"},{"size":13523,"mtime":1611380288878,"results":"52","hashOfConfig":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"191uypz",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"xeclxe",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/shivansh/Desktop/mern1/frontend/src/index.js",[],["111","112"],"/home/shivansh/Desktop/mern1/frontend/src/App.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/layout/Landing.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/layout/Navbar.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/auth/Register.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/auth/Login.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Profile.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Navbar.js",["113","114","115"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/index.js",[],["116","117"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/App.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Landing.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Navbar.js",[],["118","119"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Register.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Login.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/Context.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Profile.js",["120","121"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Navbar from \"./Navbar\";\nimport Context from '../../Context.js'\nimport { Button } from \"@material-ui/core\";\n\nconst Profile = () => {\n\n  const { store } = useContext(Context)\n  const [loader, setLoader] = useState(false)\n  const [edit, setEdit] = useState(false)\n\n  useEffect(() => {\n    console.log(store)\n    if (store.user !== undefined) {\n      setLoader(true)\n      console.log(loader)\n    }\n  })\n\n  const editProfile = () => {\n    if(edit) {\n      return <Redirect to='/editprofile'></Redirect>\n    }\n  }\n\n  const displayEducation = (edu, idx) => {\n    try {\n      if(edu.name.length >0 && edu.join.length >0 && edu.leave.length >0) {\n        return( <div>\n                  <input type='text' \n                    disabled\n                    value={`Institute #${idx + 1} name: ${edu.name}`}\n                  />\n                  <input type='text'\n                    disabled\n                    value={`Joining date: ${edu.join}`}\n                  />\n                  <input type='text'\n                    disabled\n                    value={`Left on: ${edu.leave}`}\n                  />\n                </div>\n        )\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const displaySkills = (skill, idx) => {\n    try {\n      if(skill.name.length >0){\n        return(\n          <div>\n            <input type='text'\n              disabled\n              value={`Skill #${idx + 1} name: ${skill.name}`}\n            />\n          </div>\n        )\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const renderDisplay = () => {\n    if (loader) {\n      return(\n        <div>\n          <Navbar/>\n          <div className='header center'>\n            <h3><b>My Profile</b></h3>\n          </div>\n          <div className='row container'>\n            <form className='col s12'>\n              <div className='row center'>\n                <img src={store.user.profile} alt='Profile Image'\n                className='circle'\n                    style={{ maxHeight: '100px', \n                              maxWidth: '100px'}}/>\n              </div>\n              <div className='row center'>\n                <div className='input-field col s4'>\n                  <input disabled\n                        id='username'\n                        type='text'\n                        className='validate'/>\n                  <label for='username'>\n                    <b>Username: </b>{store.user.name}\n                  </label>     \n                </div>\n                <div className='input-field col s3'>\n                  <input disabled\n                        id='isApplicant'\n                        type='text'\n                        className='validate'/>\n                  <label for='isApplicant'>\n                    <b>Category: </b>{store.user.isApplicant? 'Applicant': 'Recruitor'}\n                  </label>     \n                </div>\n              </div>\n              <div className='row'>\n                <div className='input-field col s5'>\n                  <input disabled\n                        id='email'\n                        type='email'\n                        className='validate'/>\n                  <label for='email'>\n                    <b>Email: </b>{store.user.email}\n                  </label>\n                </div>\n              </div>\n              <div>\n                {store.user.education.map((edu, idx) => (\n                  <div className=\"education\">\n                    {displayEducation(edu, idx)}\n                  </div>\n                ))}\n              </div>\n              <div>\n                {store.user.skills.map((skill, idx) => (\n                  <div>\n                    {displaySkills(skill, idx)}\n                  </div> \n                ))}\n              </div>\n            </form>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              onClick={() => setEdit(true)}\n            >\n              Edit Profile\n            </Button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n    <div>\n      {renderDisplay()}\n    </div>\n    <div>\n      {editProfile()}\n    </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Navbar.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/EditProfile.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/RProfile.js",["122","123"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Navbar from \"./Navbar\";\nimport Context from '../../Context.js'\nimport { Button, TextField } from \"@material-ui/core\";\n\nconst RProfile = () => {\n\n  const { store } = useContext(Context)\n  const [loader, setLoader] = useState(false)\n  const [edit, setEdit] = useState(false)\n\n  useEffect(() => {\n    console.log(store)\n    if (store.user !== undefined) {\n      setLoader(true)\n      console.log(store.user)\n      console.log(loader)\n    }\n  })\n\n  const editProfile = () => {\n      if(edit) {\n          return <Redirect to='/reditprofile'></Redirect>\n      }\n  }\n\n  const renderDisplay = () => {\n    if (loader) {\n        if(store.user.isApplicant)\n            return\n      return(\n        <div>\n          <Navbar/>\n          <div className='header center'>\n            <h3><b>My Profile</b></h3>\n          </div>\n          <div className='row container'>\n            <form className='col s12'>\n              <div className='row center'>\n                <img src={store.user.profile} alt='Profile Image'\n                className='circle'\n                    style={{ maxHeight: '100px', \n                              maxWidth: '100px'}}/>\n              </div>\n              <div className='row center'>\n                <div className='input-field col s4'>\n                  <input disabled\n                        id='username'\n                        type='text'\n                        className='validate'/>\n                  <label htmlFor='username'>\n                    <b>Username: </b>{store.user.name}\n                  </label>     \n                </div>\n                <div className='input-field col s3'>\n                  <input disabled\n                        id='isApplicant'\n                        type='text'\n                        className='validate'/>\n                  <label htmlFor='isApplicant'>\n                    <b>Category: </b>{store.user.isApplicant? 'Applicant': 'Recruitor'}\n                  </label>     \n                </div>\n              </div>\n              <div className='row'>\n                <div className='input-field col s5'>\n                  <input disabled\n                        id='email'\n                        type='email'\n                        className='validate'/>\n                  <label htmlFor='email'>\n                    <b>Email: </b>{store.user.email}\n                  </label>\n                </div>\n              </div>\n              <div className='row'>\n                <div className='input-field col s12'>\n                    <textarea id='bio'\n                    disabled\n                    type='text'\n                    className='materialize-textarea' \n                    />\n                    <label htmlFor='bio'>\n                        <b>BIO: </b>{store.user.bio}\n                    </label>\n                </div>\n              </div>\n              <div className='row'>\n                  <div className='input-field col s12'>\n                      <TextField\n                        id='contact'\n                        inputProps={{\n                            maxlength: 9\n                        }}\n                        ></TextField>\n                        <label htmlFor='contact'>\n                            <b>Contact: </b>{store.user.contact}\n                        </label>\n                  </div>\n              </div>\n            </form>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              onClick={() => setEdit(true)}\n            >\n              Edit Profile\n            </Button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n        <div>\n            {renderDisplay()}\n        </div>\n        <div>\n            {editProfile()}\n        </div>\n    </div>\n  );\n};\n\nexport default RProfile;\n","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/Navbar.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/REditProfile.js",["124"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Context from \"../../Context\";\nimport FileBase from \"react-file-base64\";\nimport { Form } from \"react-bootstrap\";\nimport axios from 'axios'\nimport { TextField } from '@material-ui/core'\nimport classnames from 'classnames'\n\nconst REditProfile = () => {\n  const { store, setStore } = useContext(Context);\n  const [name, setName] = useState('');\n  const [profile, setProfile] = useState('');\n  const [contact, setContact] = useState('');\n  const [bio, setBio] = useState('');\n  const [loader, setLoader] = useState(false)\n  const [profLoad, setProfLoad] = useState(false)\n  const [errors, setErrors] = useState({})\n\n\n  const goBack = () => {\n    if(profLoad) {\n      return <Redirect to='/rprofile'></Redirect>\n    }\n  }\n\n  useEffect(() => {\n    if(loader) return\n    if (store.user !== undefined) {\n      setLoader(true)\n      setName(store.user.name)\n      setProfile(store.user.profile)\n      setContact(store.user.contact)\n      setBio(store.user.bio)\n    } \n  }, [loader, store.user])\n\n  async function editMe() {\n    try {\n      let res = await axios.post('http://localhost:5000/users/reditprofile', {\n        name,\n        email: store.user.email,\n        isApplicant: store.user.isApplicant,\n        pass: store.user.pass,\n        profile,\n        contact,\n        bio\n      })\n      if (res.status === 200){\n        console.log('Success')\n        setProfLoad(true)\n        setStore({ ...store, user: res.data.user })\n      } else if (res.data.contact) {\n        setErrors({ contact: res.data.contact })\n       } else if (res.data.bio) {\n        setErrors({ bio: res.data.bio })\n       } else {\n           setErrors({ someError: res.data.someError })\n       }\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  const renderDisplay = () => {\n    if (loader) {\n      return (\n        <div className=\"container\">\n          <Form>\n            <Form.Group controlid=\"name\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                plaintext\n                defaultValue={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group controlid=\"email\">\n              <Form.Label>Email ID</Form.Label>\n              <Form.Control\n                type=\"email\"\n                plaintext\n                defaultValue={store.user.email}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group controlid=\"isApplicant\">\n              <Form.Label>Category</Form.Label>\n              <Form.Control\n                type=\"text\"\n                plaintext\n                defaultValue={store.user.isApplicant ? \"Applicant\" : \"Recruitor\"}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group controlid=\"contact\">\n              <Form.Label>Contact</Form.Label>\n              <Form.Control\n                className={classnames('', { invalid: errors.contact })}\n                type=\"text\"\n                plaintext\n                defaultValue={contact}\n                onChange={(e) => setContact(e.target.value)}\n              />\n              <span className='red-text'>{errors.contact}</span>\n            </Form.Group>\n            <Form.Group controlid=\"bio\">\n              <Form.Label>Bio</Form.Label>\n              <Form.Control\n                type=\"text\"\n                plaintext\n                defaultValue={bio}\n                onChange={(e) => setBio(e.target.value)}\n                className={classnames('', { invalid: errors.bio })}\n              />\n              <span className='red-text'>{errors.bio}</span>\n            </Form.Group>\n            <Form.Group controlid='profile'>\n              <div\n                className=\"waves-effect waves-light btn hoverable blue accent3\"\n                style={{ margin: \"5px\" }}\n              >\n                <FileBase\n                  id=\"profile\"\n                  type=\"file\"\n                  multiple={false}\n                  onDone={(file) => setProfile(file.base64)}\n                ></FileBase>\n                <label htmlFor=\"profile\" className=\"white-text\">\n                  Profile\n                </label>\n              </div>\n            </Form.Group>\n          </Form>\n          <div className='col s12' style={{ margin: '10px' }}>\n            <button className='btn waves-effect waves-light hoverable blue accent3'\n              type='submit'\n              onClick={() => editMe()}>\n                <i className='material-icons right'>send</i>\n                Edit\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        {renderDisplay()}\n      </div>\n      <div>\n        {goBack()}\n      </div>\n    </div>\n  )\n\n\n};\n\nexport default REditProfile;","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/ViewJob.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/CreateJob.js",["125"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Context from '../../Context'\nimport { Form } from 'react-bootstrap'\nimport axios from 'axios'\nimport classnames from 'classnames'\n\nconst CreateJob = () => {\n    const { store } = useContext(Context)\n    const [loader, setLoader] = useState(false)\n    const [title, setTitle] = useState('')\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [applicants, setApplicants] = useState(0)\n    const [positions, setPositions] = useState(0)\n    const [skills, setSkills] = useState([{ name: \"\" }])\n    const [jobtype, setJobtype] = useState('')\n    const [duration, setDuration] = useState(0)\n    const [salary, setSalary] = useState(0) \n    const [errors, setErrors] = useState({})\n    const [back, setBack] = useState(false)\n    \n    useEffect(() => {\n        if(loader) return\n        if(store.user !== undefined) {\n            setLoader(true)\n            setName(store.user.name)\n            setEmail(store.user.email)\n        }\n    })\n    \n    const goBack = () => {\n        if(back) {\n            return <Redirect to='/viewjob'></Redirect>\n        }\n    }\n\n    const createMe = async () => {\n        try {\n            const res = await axios.post('http://localhost:5000/jobs/createjob', {\n                title,\n                name,\n                email,\n                applicants,\n                positions,\n                skills,\n                jobtype,\n                duration,\n                salary\n            })\n            console.log(res)\n            if(res.status === 200) {\n                setTitle('')\n                setApplicants(0)\n                setPositions(0)\n                setSkills([{name: ''}])\n                setJobtype('')\n                setDuration(0)\n                setSalary(0)\n                setErrors({})\n                setBack(true)\n                console.log('Success')\n            } else if(res.data.title){\n                setErrors({ title: res.data.title })\n            } else if(res.data.applicants) {\n                setErrors({ applicants: res.data.applicants })\n            } else if(res.data.positions) {\n                setErrors({ positions: res.data.positions })\n            } else if(res.data.jobtype) {\n                setErrors({ jobtype: res.data.jobtype })\n            } else if(res.data.duration) {\n                setErrors({ duration: res.data.duration })\n            } else if(res.data.salary) {\n                setErrors({ salary: res.data.salary })\n            } else {\n                console.log(res.data.someError)\n            }\n        } catch(err) {\n            console.log(err.message)\n        }\n    }\n\n    const handleSkillNameChange = idx => e => {\n        const newSkills = skills.map((skill, sidx) => {\n            if (idx !== sidx) return skill\n            return { ...skill, name: e.target.value }\n        })\n        setSkills(newSkills)\n    }\n\n    const handleSkillRemove = idx => () => {\n        setSkills(skills.filter((s, sidx) => idx !== sidx))\n    }\n\n    const renderDisplay = () => {\n        if(loader) {\n            return(\n                <div className='container'>\n                    <Form>\n                        <Form.Group controid='title'>\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control \n                                className={classnames('', { invalid: errors.title })}\n                                type='text'\n                                plaintext\n                                defaultValue={title}\n                                onChange={e => setTitle(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.title}</span>\n                        </Form.Group>\n                        <Form.Group controid='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control \n                                type='text'\n                                plaintext\n                                defaultValue={name}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='email'>\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control \n                                type='email'\n                                plaintext\n                                defaultValue={email}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='applicants'>\n                            <Form.Label>Max number of Applicants</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invaid: errors.applicants})}\n                                type='number'\n                                plaintext\n                                defaultValue={applicants}\n                                onChange={e => setApplicants(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.applicants}</span>\n                        </Form.Group>\n                        <Form.Group controid='positions'>\n                            <Form.Label>Max number of Positons</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid: errors.positions})}\n                                type='number'\n                                plaintext\n                                defaultValue={positions}\n                                onChange={e => setPositions(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.positions}</span>\n                        </Form.Group>\n                        <Form.Group controlid='skills'>\n                            {skills.map((skill, idx) => (\n                                <div className='skill'>\n                                    <input \n                                        type='text'\n                                        placeholder={`Skill #${idx + 1} name`}\n                                        value={skill.name}\n                                        onChange={handleSkillNameChange(idx)}\n                                    />\n                                    <button \n                                        type='button'\n                                        onClick={handleSkillRemove(idx)}\n                                        className='small waves-effect waves-light btn hoverable blue accent3'\n                                        style={{ margin: '10px' }}\n                                    >\n                                        x\n                                    </button>\n                                </div>\n                            ))}\n                            <button \n                                type='button'\n                                onClick={() => setSkills(skills.concat([{ name: '' }]))}\n                                className='small waves-effect waves-light btn hoverable blue accent3'\n                                style={{ margin: '10px' }}\n                            >\n                                Add Skill\n                            </button>\n                        </Form.Group>\n                        <Form.Group controid='job type'>\n                            <Form.Label>Job Type</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid:errors.jobtype})}\n                                type='text'\n                                plaintext\n                                defaultValue={jobtype}\n                                onChange={e => setJobtype(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.jobtype}</span>\n                        </Form.Group>\n                        <Form.Group controid='months'>\n                            <Form.Label>Duration of Job</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid:errors.duration})}\n                                type='number'\n                                plaintext\n                                defaultValue={duration}\n                                onChange={e => setDuration(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.duration}</span>\n                        </Form.Group>\n                        <Form.Group controid='salary'>\n                            <Form.Label>Salary of Job</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid: errors.salary})}\n                                type='number'\n                                plaintext\n                                defaultValue={salary}\n                                onChange={e => setSalary(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.salary}</span>\n                        </Form.Group>\n                    </Form>\n                    <div className='col s12' style={{ margin: '10px' }}>\n                        <button className='btn waves-effect waves-light hoverable blue accent3'\n                        type='submit'\n                        onClick={() => createMe()}>\n                            <i className='material-icons right'>send</i>\n                            Create\n                        </button>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    return(\n        <div>\n            <div>\n                {renderDisplay()}\n            </div>\n            <div>\n                {goBack()}\n            </div>\n        </div>\n    )\n}\n\nexport default CreateJob","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/EditJob.js",["126"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Context from '../../Context'\nimport { Form } from 'react-bootstrap'\nimport axios from 'axios'\nimport classnames from 'classnames'\n\nconst EditJob = () => {\n    const { store } = useContext(Context)\n    const [loader, setLoader] = useState(false)\n    const [title, setTitle] = useState('')\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [applicants, setApplicants] = useState(0)\n    const [positions, setPositions] = useState(0)\n    const [skills, setSkills] = useState([{ name: \"\" }])\n    const [jobtype, setJobtype] = useState('')\n    const [duration, setDuration] = useState(0)\n    const [salary, setSalary] = useState(0) \n    const [nerrors, setNErrors] = useState({})\n    const [back, setBack] = useState(false)\n    const [etitle, setEtitle] = useState('')\n    const [see, setSee] = useState(false)\n    const [load, setLoad] = useState(false) \n    const [errors, setErrors] = useState({}) \n     \n    useEffect(() => {\n        if(loader) return\n        if(store.user !== undefined) {\n            setLoader(true)\n            setName(store.user.name)\n            setEmail(store.user.email)\n            setSee(true)\n        }\n    })\n    \n    const goBack = () => {\n        if(back) {\n            return <Redirect to='/viewjob'></Redirect>\n        }\n    }\n\n    const editMe = async () => {\n        try {\n            console.log('here')\n            const res = await axios.post('http://localhost:5000/jobs/getjob', {\n                etitle\n            })\n            console.log(res)\n            console.log(etitle)\n            if (res.status === 200) {\n                console.log('Success')\n                setTitle(res.data.job.title)\n                setApplicants(res.data.job.applicants)\n                setPositions(res.data.job.positions)\n                setSkills(res.data.job.skills)\n                setJobtype(res.data.job.jobtype)\n                setSalary(res.data.job.salary)\n                setDuration(res.data.job.duration)\n                setNErrors({})\n                setSee(false)\n                setLoad(true)\n            } else if(res.data.title) {\n                setNErrors({ title: res.data.title})\n            } else {\n                setNErrors({ someError: res.data.someError })\n            }\n        } catch (err) {\n            console.log(err.message)\n        }\n    }\n\n    const createMe = async () => {\n        try {\n            const res = await axios.post('http://localhost:5000/jobs/editjob', {\n                title,\n                name,\n                email,\n                applicants,\n                positions,\n                skills,\n                jobtype,\n                duration,\n                salary\n            })\n            console.log(res)\n            if(res.status === 200) {\n                setTitle('')\n                setApplicants(0)\n                setPositions(0)\n                setSkills([{name: ''}])\n                setJobtype('')\n                setDuration(0)\n                setSalary(0)\n                setErrors({})\n                setBack(true)\n                console.log('Success')\n            } else if(res.data.applicants) {\n                setErrors({ applicants: res.data.applicants })\n            } else if(res.data.positions) {\n                setErrors({ positions: res.data.positions })\n            } else {\n                console.log(res.data.someError)\n            }\n        } catch(err) {\n            console.log(err.message)\n        }\n    }\n\n    const acceptInput = () => {\n        if(see) {\n            return (\n                <div className='container'>\n                    <Form>\n                        <Form.Group controlid='etitle'>\n                            <Form.Label>Title of Job</Form.Label>\n                            <Form.Control\n                                className={classnames('', { invalid: nerrors.title })}\n                                type='text'\n                                plaintext\n                                defaultValue={etitle}\n                                onChange={e => setEtitle(e.target.value)}\n                            />\n                            <span className='red-text'>{nerrors.title}</span>\n                        </Form.Group>\n                    </Form>\n                    <div className='col s12' style={{ margin: '10px' }}>\n                        <button className='btn waves-effect waves-light hoverable blue accent3'\n                        type='submit'\n                        onClick={() => editMe()}>\n                            <i className='material-icons right'>send</i>\n                            Edit \n                        </button>\n                    </div>\n                    <div className='col s12' style={{ margin: '10px' }}>\n                        <button className='btn waves-effect waves-light hoverable blue accent3'\n                        type='submit'\n                        onClick={() => setBack(true)}>\n                            Go Back \n                        </button>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    const renderDisplay = () => {\n        if(!load) return\n        return(\n            <div className='container'>\n                <Form>\n                    <Form.Group controid='title'>\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control \n                            type='text'\n                            plaintext\n                            defaultValue={title}\n                            readOnly\n                        />\n                        <span className='red-text'>{errors.title}</span>\n                    </Form.Group>\n                    <Form.Group controid='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type='text'\n                            plaintext\n                            defaultValue={name}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='email'>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type='email'\n                            plaintext\n                            defaultValue={email}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='applicants'>\n                        <Form.Label>Max number of Applicants</Form.Label>\n                        <Form.Control \n                            className={classnames('', {invaid: errors.applicants})}\n                            type='number'\n                            plaintext\n                            defaultValue={applicants}\n                            onChange={e => setApplicants(e.target.value)}\n                        />\n                        <span className='red-text'>{errors.applicants}</span>\n                    </Form.Group>\n                    <Form.Group controid='positions'>\n                        <Form.Label>Max number of Positons</Form.Label>\n                        <Form.Control \n                            className={classnames('', {invalid: errors.positions})}\n                            type='number'\n                            plaintext\n                            defaultValue={positions}\n                            onChange={e => setPositions(e.target.value)}\n                        />\n                        <span className='red-text'>{errors.positions}</span>\n                    </Form.Group>\n                    <Form.Group controlid='skills'>\n                        <Form.Label>Skills</Form.Label>\n                        {skills.map((skill, idx) => (\n                            <div className='skill'>\n                                <input \n                                    type='text'\n                                    placeholder={`Skill #${idx + 1} name`}\n                                    value={skill.name}\n                                    readOnly\n                                />\n                            </div>\n                        ))}\n                    </Form.Group>\n                    <Form.Group controid='job type'>\n                        <Form.Label>Job Type</Form.Label>\n                        <Form.Control \n                            type='text'\n                            plaintext\n                            defaultValue={jobtype}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='months'>\n                        <Form.Label>Duration of Job</Form.Label>\n                        <Form.Control \n                            type='number'\n                            plaintext\n                            defaultValue={duration}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='salary'>\n                        <Form.Label>Salary of Job</Form.Label>\n                        <Form.Control \n                            type='number'\n                            plaintext\n                            defaultValue={salary}\n                            readOnly\n                        />\n                    </Form.Group>\n                </Form>\n                <div className='col s12' style={{ margin: '10px' }}>\n                    <button className='btn waves-effect waves-light hoverable blue accent3'\n                    type='submit'\n                    onClick={() => createMe()}>\n                        <i className='material-icons right'>send</i>\n                        Edit\n                    </button>\n                </div>\n            </div>\n        )\n}\n\n    return(\n        <div>\n            <div>\n                {acceptInput()}\n            </div>\n            <div>\n                {renderDisplay()}\n            </div>\n            <div>\n                {goBack()}\n            </div>\n        </div>\n    )\n}\n\nexport default EditJob","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/ViewJob.js",["127"],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":10,"column":11,"nodeType":"134","endLine":10,"endColumn":37},{"ruleId":"135","severity":1,"message":"136","line":10,"column":11,"nodeType":"134","endLine":10,"endColumn":37},{"ruleId":"135","severity":1,"message":"136","line":11,"column":11,"nodeType":"134","endLine":11,"endColumn":68},{"ruleId":"128","replacedBy":"137"},{"ruleId":"130","replacedBy":"138"},{"ruleId":"128","replacedBy":"139"},{"ruleId":"130","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":13,"column":3,"nodeType":"143","endLine":13,"endColumn":12,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":79,"column":17,"nodeType":"134","endLine":82,"endColumn":52},{"ruleId":"141","severity":1,"message":"142","line":13,"column":3,"nodeType":"143","endLine":13,"endColumn":12,"suggestions":"147"},{"ruleId":"145","severity":1,"message":"146","line":41,"column":17,"nodeType":"134","endLine":44,"endColumn":52},{"ruleId":"148","severity":1,"message":"149","line":7,"column":10,"nodeType":"143","messageId":"150","endLine":7,"endColumn":19},{"ruleId":"141","severity":1,"message":"151","line":23,"column":5,"nodeType":"143","endLine":23,"endColumn":14,"suggestions":"152"},{"ruleId":"141","severity":1,"message":"151","line":27,"column":5,"nodeType":"143","endLine":27,"endColumn":14,"suggestions":"153"},{"ruleId":"148","severity":1,"message":"154","line":2,"column":10,"nodeType":"143","messageId":"150","endLine":2,"endColumn":18},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["155"],["156"],["155"],["156"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [store, loader] as a second argument to the useEffect Hook.","Identifier",["157"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["158"],"no-unused-vars","'TextField' is defined but never used.","unusedVar","React Hook useEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loader, store.user] as a second argument to the useEffect Hook.",["159"],["160"],"'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"161","fix":"163"},{"desc":"164","fix":"165"},{"desc":"164","fix":"166"},"Add dependencies array: [store, loader]",{"range":"167","text":"168"},{"range":"169","text":"168"},"Add dependencies array: [loader, store.user]",{"range":"170","text":"171"},{"range":"172","text":"171"},[513,513],", [store, loader]",[555,555],[1087,1087],", [loader, store.user]",[1291,1291]]