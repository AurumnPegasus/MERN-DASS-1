[{"/home/shivansh/Desktop/mern1/frontend/src/index.js":"1","/home/shivansh/Desktop/mern1/frontend/src/App.js":"2","/home/shivansh/Desktop/mern1/frontend/src/components/layout/Landing.js":"3","/home/shivansh/Desktop/mern1/frontend/src/components/layout/Navbar.js":"4","/home/shivansh/Desktop/mern1/frontend/src/components/auth/Register.js":"5","/home/shivansh/Desktop/mern1/frontend/src/components/auth/Login.js":"6","/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Profile.js":"7","/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Navbar.js":"8","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/index.js":"9","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/App.js":"10","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Landing.js":"11","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Navbar.js":"12","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Register.js":"13","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Login.js":"14","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/Context.js":"15","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Profile.js":"16","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Navbar.js":"17","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/EditProfile.js":"18","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/RProfile.js":"19","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/Navbar.js":"20","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/REditProfile.js":"21","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/ViewJob.js":"22","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/CreateJob.js":"23","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/EditJob.js":"24","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/ViewJob.js":"25","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/MyApplications.js":"26","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/DeleteJob.js":"27","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/MyApplicant.js":"28"},{"size":147,"mtime":1610408903437,"results":"29","hashOfConfig":"30"},{"size":806,"mtime":1610647411283,"results":"31","hashOfConfig":"30"},{"size":1677,"mtime":1610529769715,"results":"32","hashOfConfig":"30"},{"size":598,"mtime":1610646195569,"results":"33","hashOfConfig":"30"},{"size":6518,"mtime":1610646241621,"results":"34","hashOfConfig":"30"},{"size":3247,"mtime":1610649141557,"results":"35","hashOfConfig":"30"},{"size":231,"mtime":1610648534312,"results":"36","hashOfConfig":"30"},{"size":1528,"mtime":1610647390939,"results":"37","hashOfConfig":"30"},{"size":147,"mtime":1610894797641,"results":"38","hashOfConfig":"39"},{"size":3018,"mtime":1611594250340,"results":"40","hashOfConfig":"39"},{"size":1677,"mtime":1610894797641,"results":"41","hashOfConfig":"39"},{"size":598,"mtime":1610894797641,"results":"42","hashOfConfig":"39"},{"size":6518,"mtime":1611336741540,"results":"43","hashOfConfig":"39"},{"size":3790,"mtime":1611120198262,"results":"44","hashOfConfig":"39"},{"size":75,"mtime":1611142799428,"results":"45","hashOfConfig":"39"},{"size":4403,"mtime":1611136627499,"results":"46","hashOfConfig":"39"},{"size":1580,"mtime":1611549368550,"results":"47","hashOfConfig":"39"},{"size":7709,"mtime":1611137048414,"results":"48","hashOfConfig":"39"},{"size":4007,"mtime":1611136292575,"results":"49","hashOfConfig":"39"},{"size":1591,"mtime":1611594227820,"results":"50","hashOfConfig":"39"},{"size":4901,"mtime":1611136624059,"results":"51","hashOfConfig":"39"},{"size":13427,"mtime":1611574038702,"results":"52","hashOfConfig":"39"},{"size":10039,"mtime":1611222629001,"results":"53","hashOfConfig":"39"},{"size":10193,"mtime":1611274047274,"results":"54","hashOfConfig":"39"},{"size":22474,"mtime":1611547416417,"results":"55","hashOfConfig":"39"},{"size":2698,"mtime":1611504504313,"results":"56","hashOfConfig":"39"},{"size":2777,"mtime":1611504758856,"results":"57","hashOfConfig":"39"},{"size":2564,"mtime":1611595324861,"results":"58","hashOfConfig":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"191uypz",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"xeclxe",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shivansh/Desktop/mern1/frontend/src/index.js",[],["126","127"],"/home/shivansh/Desktop/mern1/frontend/src/App.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/layout/Landing.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/layout/Navbar.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/auth/Register.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/auth/Login.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Profile.js",[],"/home/shivansh/Desktop/mern1/frontend/src/components/applicant/Navbar.js",["128","129","130"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/index.js",[],["131","132"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/App.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Landing.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/layout/Navbar.js",[],["133","134"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Register.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/auth/Login.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/Context.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Profile.js",["135","136"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Navbar from \"./Navbar\";\nimport Context from '../../Context.js'\nimport { Button } from \"@material-ui/core\";\n\nconst Profile = () => {\n\n  const { store } = useContext(Context)\n  const [loader, setLoader] = useState(false)\n  const [edit, setEdit] = useState(false)\n\n  useEffect(() => {\n    console.log(store)\n    if (store.user !== undefined) {\n      setLoader(true)\n      console.log(loader)\n    }\n  })\n\n  const editProfile = () => {\n    if(edit) {\n      return <Redirect to='/editprofile'></Redirect>\n    }\n  }\n\n  const displayEducation = (edu, idx) => {\n    try {\n      if(edu.name.length >0 && edu.join.length >0 && edu.leave.length >0) {\n        return( <div>\n                  <input type='text' \n                    disabled\n                    value={`Institute #${idx + 1} name: ${edu.name}`}\n                  />\n                  <input type='text'\n                    disabled\n                    value={`Joining date: ${edu.join}`}\n                  />\n                  <input type='text'\n                    disabled\n                    value={`Left on: ${edu.leave}`}\n                  />\n                </div>\n        )\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const displaySkills = (skill, idx) => {\n    try {\n      if(skill.name.length >0){\n        return(\n          <div>\n            <input type='text'\n              disabled\n              value={`Skill #${idx + 1} name: ${skill.name}`}\n            />\n          </div>\n        )\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const renderDisplay = () => {\n    if (loader) {\n      return(\n        <div>\n          <Navbar/>\n          <div className='header center'>\n            <h3><b>My Profile</b></h3>\n          </div>\n          <div className='row container'>\n            <form className='col s12'>\n              <div className='row center'>\n                <img src={store.user.profile} alt='Profile Image'\n                className='circle'\n                    style={{ maxHeight: '100px', \n                              maxWidth: '100px'}}/>\n              </div>\n              <div className='row center'>\n                <div className='input-field col s4'>\n                  <input disabled\n                        id='username'\n                        type='text'\n                        className='validate'/>\n                  <label for='username'>\n                    <b>Username: </b>{store.user.name}\n                  </label>     \n                </div>\n                <div className='input-field col s3'>\n                  <input disabled\n                        id='isApplicant'\n                        type='text'\n                        className='validate'/>\n                  <label for='isApplicant'>\n                    <b>Category: </b>{store.user.isApplicant? 'Applicant': 'Recruitor'}\n                  </label>     \n                </div>\n              </div>\n              <div className='row'>\n                <div className='input-field col s5'>\n                  <input disabled\n                        id='email'\n                        type='email'\n                        className='validate'/>\n                  <label for='email'>\n                    <b>Email: </b>{store.user.email}\n                  </label>\n                </div>\n              </div>\n              <div>\n                {store.user.education.map((edu, idx) => (\n                  <div className=\"education\">\n                    {displayEducation(edu, idx)}\n                  </div>\n                ))}\n              </div>\n              <div>\n                {store.user.skills.map((skill, idx) => (\n                  <div>\n                    {displaySkills(skill, idx)}\n                  </div> \n                ))}\n              </div>\n            </form>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              onClick={() => setEdit(true)}\n            >\n              Edit Profile\n            </Button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n    <div>\n      {renderDisplay()}\n    </div>\n    <div>\n      {editProfile()}\n    </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/Navbar.js",["137","138"],"// Importing required frameworks/libraries\nimport React, { useState } from \"react\";\nimport { Link, BrowserRouter, Redirect } from \"react-router-dom\";\n\nconst Navbar = () => {\n\n  const [job, setJob] = useState(false)\n  const [profile, setProfile] = useState(false)\n  const [apps, setApps] = useState(false)\n  const [sign, setSign] = useState(false)\n\n  const viewProfile = () =>{\n    if(profile) return <Redirect to='/profile'></Redirect>\n  }\n\n  const viewJob = () => {\n    if (job) return <Redirect to='/aviewjob'></Redirect>\n  }\n  \n  const viewApps = () => {\n    if (apps) return <Redirect to='/myapps'></Redirect>\n  }\n  \n  const viewSign = () => {\n    if(sign) {\n      localStorage.clear()\n      return <Redirect to='/login'></Redirect>\n    }\n  }\n\n  return (\n    <div>\n      <nav className=\"nav-extended\">\n        <div className=\"nav-content\">\n          <ul className=\"tabs tabs-transparent\">\n            <li className=\"tab\">\n              <button onClick={() => setApps(true)}>My Applications</button>\n              {viewApps()}\n            </li>\n            <li className=\"tab\">\n              <button onClick={() => setJob(true)}>Job</button>\n              {viewJob()}\n            </li>\n            <li className=\"tab\">\n              <button onClick={() => setProfile(true)}>My Profile</button>\n              {viewProfile()}\n            </li>\n            <li className=\"tab\">\n              <button onClick={() => setSign(true)}>Sign out</button>\n              {viewSign()}\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/EditProfile.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/RProfile.js",["139","140"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Navbar from \"./Navbar\";\nimport Context from '../../Context.js'\nimport { Button, TextField } from \"@material-ui/core\";\n\nconst RProfile = () => {\n\n  const { store } = useContext(Context)\n  const [loader, setLoader] = useState(false)\n  const [edit, setEdit] = useState(false)\n\n  useEffect(() => {\n    console.log(store)\n    if (store.user !== undefined) {\n      setLoader(true)\n      console.log(store.user)\n      console.log(loader)\n    }\n  })\n\n  const editProfile = () => {\n      if(edit) {\n          return <Redirect to='/reditprofile'></Redirect>\n      }\n  }\n\n  const renderDisplay = () => {\n    if (loader) {\n        if(store.user.isApplicant)\n            return\n      return(\n        <div>\n          <Navbar/>\n          <div className='header center'>\n            <h3><b>My Profile</b></h3>\n          </div>\n          <div className='row container'>\n            <form className='col s12'>\n              <div className='row center'>\n                <img src={store.user.profile} alt='Profile Image'\n                className='circle'\n                    style={{ maxHeight: '100px', \n                              maxWidth: '100px'}}/>\n              </div>\n              <div className='row center'>\n                <div className='input-field col s4'>\n                  <input disabled\n                        id='username'\n                        type='text'\n                        className='validate'/>\n                  <label htmlFor='username'>\n                    <b>Username: </b>{store.user.name}\n                  </label>     \n                </div>\n                <div className='input-field col s3'>\n                  <input disabled\n                        id='isApplicant'\n                        type='text'\n                        className='validate'/>\n                  <label htmlFor='isApplicant'>\n                    <b>Category: </b>{store.user.isApplicant? 'Applicant': 'Recruitor'}\n                  </label>     \n                </div>\n              </div>\n              <div className='row'>\n                <div className='input-field col s5'>\n                  <input disabled\n                        id='email'\n                        type='email'\n                        className='validate'/>\n                  <label htmlFor='email'>\n                    <b>Email: </b>{store.user.email}\n                  </label>\n                </div>\n              </div>\n              <div className='row'>\n                <div className='input-field col s12'>\n                    <textarea id='bio'\n                    disabled\n                    type='text'\n                    className='materialize-textarea' \n                    />\n                    <label htmlFor='bio'>\n                        <b>BIO: </b>{store.user.bio}\n                    </label>\n                </div>\n              </div>\n              <div className='row'>\n                  <div className='input-field col s12'>\n                      <TextField\n                        id='contact'\n                        inputProps={{\n                            maxlength: 9\n                        }}\n                        ></TextField>\n                        <label htmlFor='contact'>\n                            <b>Contact: </b>{store.user.contact}\n                        </label>\n                  </div>\n              </div>\n            </form>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              onClick={() => setEdit(true)}\n            >\n              Edit Profile\n            </Button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n        <div>\n            {renderDisplay()}\n        </div>\n        <div>\n            {editProfile()}\n        </div>\n    </div>\n  );\n};\n\nexport default RProfile;\n","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/Navbar.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/REditProfile.js",["141"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Context from \"../../Context\";\nimport FileBase from \"react-file-base64\";\nimport { Form } from \"react-bootstrap\";\nimport axios from 'axios'\nimport { TextField } from '@material-ui/core'\nimport classnames from 'classnames'\n\nconst REditProfile = () => {\n  const { store, setStore } = useContext(Context);\n  const [name, setName] = useState('');\n  const [profile, setProfile] = useState('');\n  const [contact, setContact] = useState('');\n  const [bio, setBio] = useState('');\n  const [loader, setLoader] = useState(false)\n  const [profLoad, setProfLoad] = useState(false)\n  const [errors, setErrors] = useState({})\n\n\n  const goBack = () => {\n    if(profLoad) {\n      return <Redirect to='/rprofile'></Redirect>\n    }\n  }\n\n  useEffect(() => {\n    if(loader) return\n    if (store.user !== undefined) {\n      setLoader(true)\n      setName(store.user.name)\n      setProfile(store.user.profile)\n      setContact(store.user.contact)\n      setBio(store.user.bio)\n    } \n  }, [loader, store.user])\n\n  async function editMe() {\n    try {\n      let res = await axios.post('http://localhost:5000/users/reditprofile', {\n        name,\n        email: store.user.email,\n        isApplicant: store.user.isApplicant,\n        pass: store.user.pass,\n        profile,\n        contact,\n        bio\n      })\n      if (res.status === 200){\n        console.log('Success')\n        setProfLoad(true)\n        setStore({ ...store, user: res.data.user })\n      } else if (res.data.contact) {\n        setErrors({ contact: res.data.contact })\n       } else if (res.data.bio) {\n        setErrors({ bio: res.data.bio })\n       } else {\n           setErrors({ someError: res.data.someError })\n       }\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  const renderDisplay = () => {\n    if (loader) {\n      return (\n        <div className=\"container\">\n          <Form>\n            <Form.Group controlid=\"name\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                plaintext\n                defaultValue={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group controlid=\"email\">\n              <Form.Label>Email ID</Form.Label>\n              <Form.Control\n                type=\"email\"\n                plaintext\n                defaultValue={store.user.email}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group controlid=\"isApplicant\">\n              <Form.Label>Category</Form.Label>\n              <Form.Control\n                type=\"text\"\n                plaintext\n                defaultValue={store.user.isApplicant ? \"Applicant\" : \"Recruitor\"}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group controlid=\"contact\">\n              <Form.Label>Contact</Form.Label>\n              <Form.Control\n                className={classnames('', { invalid: errors.contact })}\n                type=\"text\"\n                plaintext\n                defaultValue={contact}\n                onChange={(e) => setContact(e.target.value)}\n              />\n              <span className='red-text'>{errors.contact}</span>\n            </Form.Group>\n            <Form.Group controlid=\"bio\">\n              <Form.Label>Bio</Form.Label>\n              <Form.Control\n                type=\"text\"\n                plaintext\n                defaultValue={bio}\n                onChange={(e) => setBio(e.target.value)}\n                className={classnames('', { invalid: errors.bio })}\n              />\n              <span className='red-text'>{errors.bio}</span>\n            </Form.Group>\n            <Form.Group controlid='profile'>\n              <div\n                className=\"waves-effect waves-light btn hoverable blue accent3\"\n                style={{ margin: \"5px\" }}\n              >\n                <FileBase\n                  id=\"profile\"\n                  type=\"file\"\n                  multiple={false}\n                  onDone={(file) => setProfile(file.base64)}\n                ></FileBase>\n                <label htmlFor=\"profile\" className=\"white-text\">\n                  Profile\n                </label>\n              </div>\n            </Form.Group>\n          </Form>\n          <div className='col s12' style={{ margin: '10px' }}>\n            <button className='btn waves-effect waves-light hoverable blue accent3'\n              type='submit'\n              onClick={() => editMe()}>\n                <i className='material-icons right'>send</i>\n                Edit\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        {renderDisplay()}\n      </div>\n      <div>\n        {goBack()}\n      </div>\n    </div>\n  )\n\n\n};\n\nexport default REditProfile;","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/ViewJob.js",["142","143","144","145","146"],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/CreateJob.js",["147"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Context from '../../Context'\nimport { Form } from 'react-bootstrap'\nimport axios from 'axios'\nimport classnames from 'classnames'\n\nconst CreateJob = () => {\n    const { store } = useContext(Context)\n    const [loader, setLoader] = useState(false)\n    const [title, setTitle] = useState('')\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [applicants, setApplicants] = useState(0)\n    const [positions, setPositions] = useState(0)\n    const [skills, setSkills] = useState([{ name: \"\" }])\n    const [jobtype, setJobtype] = useState('')\n    const [duration, setDuration] = useState(0)\n    const [salary, setSalary] = useState(0) \n    const [errors, setErrors] = useState({})\n    const [back, setBack] = useState(false)\n    \n    useEffect(() => {\n        if(loader) return\n        if(store.user !== undefined) {\n            setLoader(true)\n            setName(store.user.name)\n            setEmail(store.user.email)\n        }\n    })\n    \n    const goBack = () => {\n        if(back) {\n            return <Redirect to='/viewjob'></Redirect>\n        }\n    }\n\n    const createMe = async () => {\n        try {\n            const res = await axios.post('http://localhost:5000/jobs/createjob', {\n                title,\n                name,\n                email,\n                applicants,\n                positions,\n                skills,\n                jobtype,\n                duration,\n                salary\n            })\n            console.log(res)\n            if(res.status === 200) {\n                setTitle('')\n                setApplicants(0)\n                setPositions(0)\n                setSkills([{name: ''}])\n                setJobtype('')\n                setDuration(0)\n                setSalary(0)\n                setErrors({})\n                setBack(true)\n                console.log('Success')\n            } else if(res.data.title){\n                setErrors({ title: res.data.title })\n            } else if(res.data.applicants) {\n                setErrors({ applicants: res.data.applicants })\n            } else if(res.data.positions) {\n                setErrors({ positions: res.data.positions })\n            } else if(res.data.jobtype) {\n                setErrors({ jobtype: res.data.jobtype })\n            } else if(res.data.duration) {\n                setErrors({ duration: res.data.duration })\n            } else if(res.data.salary) {\n                setErrors({ salary: res.data.salary })\n            } else {\n                console.log(res.data.someError)\n            }\n        } catch(err) {\n            console.log(err.message)\n        }\n    }\n\n    const handleSkillNameChange = idx => e => {\n        const newSkills = skills.map((skill, sidx) => {\n            if (idx !== sidx) return skill\n            return { ...skill, name: e.target.value }\n        })\n        setSkills(newSkills)\n    }\n\n    const handleSkillRemove = idx => () => {\n        setSkills(skills.filter((s, sidx) => idx !== sidx))\n    }\n\n    const renderDisplay = () => {\n        if(loader) {\n            return(\n                <div className='container'>\n                    <Form>\n                        <Form.Group controid='title'>\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control \n                                className={classnames('', { invalid: errors.title })}\n                                type='text'\n                                plaintext\n                                defaultValue={title}\n                                onChange={e => setTitle(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.title}</span>\n                        </Form.Group>\n                        <Form.Group controid='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control \n                                type='text'\n                                plaintext\n                                defaultValue={name}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='email'>\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control \n                                type='email'\n                                plaintext\n                                defaultValue={email}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='applicants'>\n                            <Form.Label>Max number of Applicants</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invaid: errors.applicants})}\n                                type='number'\n                                plaintext\n                                defaultValue={applicants}\n                                onChange={e => setApplicants(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.applicants}</span>\n                        </Form.Group>\n                        <Form.Group controid='positions'>\n                            <Form.Label>Max number of Positons</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid: errors.positions})}\n                                type='number'\n                                plaintext\n                                defaultValue={positions}\n                                onChange={e => setPositions(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.positions}</span>\n                        </Form.Group>\n                        <Form.Group controlid='skills'>\n                            {skills.map((skill, idx) => (\n                                <div className='skill'>\n                                    <input \n                                        type='text'\n                                        placeholder={`Skill #${idx + 1} name`}\n                                        value={skill.name}\n                                        onChange={handleSkillNameChange(idx)}\n                                    />\n                                    <button \n                                        type='button'\n                                        onClick={handleSkillRemove(idx)}\n                                        className='small waves-effect waves-light btn hoverable blue accent3'\n                                        style={{ margin: '10px' }}\n                                    >\n                                        x\n                                    </button>\n                                </div>\n                            ))}\n                            <button \n                                type='button'\n                                onClick={() => setSkills(skills.concat([{ name: '' }]))}\n                                className='small waves-effect waves-light btn hoverable blue accent3'\n                                style={{ margin: '10px' }}\n                            >\n                                Add Skill\n                            </button>\n                        </Form.Group>\n                        <Form.Group controid='job type'>\n                            <Form.Label>Job Type</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid:errors.jobtype})}\n                                type='text'\n                                plaintext\n                                defaultValue={jobtype}\n                                onChange={e => setJobtype(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.jobtype}</span>\n                        </Form.Group>\n                        <Form.Group controid='months'>\n                            <Form.Label>Duration of Job</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid:errors.duration})}\n                                type='number'\n                                plaintext\n                                defaultValue={duration}\n                                onChange={e => setDuration(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.duration}</span>\n                        </Form.Group>\n                        <Form.Group controid='salary'>\n                            <Form.Label>Salary of Job</Form.Label>\n                            <Form.Control \n                                className={classnames('', {invalid: errors.salary})}\n                                type='number'\n                                plaintext\n                                defaultValue={salary}\n                                onChange={e => setSalary(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.salary}</span>\n                        </Form.Group>\n                    </Form>\n                    <div className='col s12' style={{ margin: '10px' }}>\n                        <button className='btn waves-effect waves-light hoverable blue accent3'\n                        type='submit'\n                        onClick={() => createMe()}>\n                            <i className='material-icons right'>send</i>\n                            Create\n                        </button>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    return(\n        <div>\n            <div>\n                {renderDisplay()}\n            </div>\n            <div>\n                {goBack()}\n            </div>\n        </div>\n    )\n}\n\nexport default CreateJob","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/EditJob.js",["148"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Context from '../../Context'\nimport { Form } from 'react-bootstrap'\nimport axios from 'axios'\nimport classnames from 'classnames'\n\nconst EditJob = () => {\n    const { store } = useContext(Context)\n    const [loader, setLoader] = useState(false)\n    const [title, setTitle] = useState('')\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [applicants, setApplicants] = useState(0)\n    const [positions, setPositions] = useState(0)\n    const [skills, setSkills] = useState([{ name: \"\" }])\n    const [jobtype, setJobtype] = useState('')\n    const [duration, setDuration] = useState(0)\n    const [salary, setSalary] = useState(0) \n    const [nerrors, setNErrors] = useState({})\n    const [back, setBack] = useState(false)\n    const [etitle, setEtitle] = useState('')\n    const [see, setSee] = useState(false)\n    const [load, setLoad] = useState(false) \n    const [errors, setErrors] = useState({}) \n     \n    useEffect(() => {\n        if(loader) return\n        if(store.user !== undefined) {\n            setLoader(true)\n            setName(store.user.name)\n            setEmail(store.user.email)\n            setSee(true)\n        }\n    })\n    \n    const goBack = () => {\n        if(back) {\n            return <Redirect to='/viewjob'></Redirect>\n        }\n    }\n\n    const editMe = async () => {\n        try {\n            console.log('here')\n            const res = await axios.post('http://localhost:5000/jobs/getjob', {\n                etitle\n            })\n            console.log(res)\n            console.log(etitle)\n            if (res.status === 200) {\n                console.log('Success')\n                setTitle(res.data.job.title)\n                setApplicants(res.data.job.applicants)\n                setPositions(res.data.job.positions)\n                setSkills(res.data.job.skills)\n                setJobtype(res.data.job.jobtype)\n                setSalary(res.data.job.salary)\n                setDuration(res.data.job.duration)\n                setNErrors({})\n                setSee(false)\n                setLoad(true)\n            } else if(res.data.title) {\n                setNErrors({ title: res.data.title})\n            } else {\n                setNErrors({ someError: res.data.someError })\n            }\n        } catch (err) {\n            console.log(err.message)\n        }\n    }\n\n    const createMe = async () => {\n        try {\n            const res = await axios.post('http://localhost:5000/jobs/editjob', {\n                title,\n                name,\n                email,\n                applicants,\n                positions,\n                skills,\n                jobtype,\n                duration,\n                salary\n            })\n            console.log(res)\n            if(res.status === 200) {\n                setTitle('')\n                setApplicants(0)\n                setPositions(0)\n                setSkills([{name: ''}])\n                setJobtype('')\n                setDuration(0)\n                setSalary(0)\n                setErrors({})\n                setBack(true)\n                console.log('Success')\n            } else if(res.data.applicants) {\n                setErrors({ applicants: res.data.applicants })\n            } else if(res.data.positions) {\n                setErrors({ positions: res.data.positions })\n            } else {\n                console.log(res.data.someError)\n            }\n        } catch(err) {\n            console.log(err.message)\n        }\n    }\n\n    const acceptInput = () => {\n        if(see) {\n            return (\n                <div className='container'>\n                    <Form>\n                        <Form.Group controlid='etitle'>\n                            <Form.Label>Title of Job</Form.Label>\n                            <Form.Control\n                                className={classnames('', { invalid: nerrors.title })}\n                                type='text'\n                                plaintext\n                                defaultValue={etitle}\n                                onChange={e => setEtitle(e.target.value)}\n                            />\n                            <span className='red-text'>{nerrors.title}</span>\n                        </Form.Group>\n                    </Form>\n                    <div className='col s12' style={{ margin: '10px' }}>\n                        <button className='btn waves-effect waves-light hoverable blue accent3'\n                        type='submit'\n                        onClick={() => editMe()}>\n                            <i className='material-icons right'>send</i>\n                            Edit \n                        </button>\n                    </div>\n                    <div className='col s12' style={{ margin: '10px' }}>\n                        <button className='btn waves-effect waves-light hoverable blue accent3'\n                        type='submit'\n                        onClick={() => setBack(true)}>\n                            Go Back \n                        </button>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    const renderDisplay = () => {\n        if(!load) return\n        return(\n            <div className='container'>\n                <Form>\n                    <Form.Group controid='title'>\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control \n                            type='text'\n                            plaintext\n                            defaultValue={title}\n                            readOnly\n                        />\n                        <span className='red-text'>{errors.title}</span>\n                    </Form.Group>\n                    <Form.Group controid='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type='text'\n                            plaintext\n                            defaultValue={name}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='email'>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type='email'\n                            plaintext\n                            defaultValue={email}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='applicants'>\n                        <Form.Label>Max number of Applicants</Form.Label>\n                        <Form.Control \n                            className={classnames('', {invaid: errors.applicants})}\n                            type='number'\n                            plaintext\n                            defaultValue={applicants}\n                            onChange={e => setApplicants(e.target.value)}\n                        />\n                        <span className='red-text'>{errors.applicants}</span>\n                    </Form.Group>\n                    <Form.Group controid='positions'>\n                        <Form.Label>Max number of Positons</Form.Label>\n                        <Form.Control \n                            className={classnames('', {invalid: errors.positions})}\n                            type='number'\n                            plaintext\n                            defaultValue={positions}\n                            onChange={e => setPositions(e.target.value)}\n                        />\n                        <span className='red-text'>{errors.positions}</span>\n                    </Form.Group>\n                    <Form.Group controlid='skills'>\n                        <Form.Label>Skills</Form.Label>\n                        {skills.map((skill, idx) => (\n                            <div className='skill'>\n                                <input \n                                    type='text'\n                                    placeholder={`Skill #${idx + 1} name`}\n                                    value={skill.name}\n                                    readOnly\n                                />\n                            </div>\n                        ))}\n                    </Form.Group>\n                    <Form.Group controid='job type'>\n                        <Form.Label>Job Type</Form.Label>\n                        <Form.Control \n                            type='text'\n                            plaintext\n                            defaultValue={jobtype}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='months'>\n                        <Form.Label>Duration of Job</Form.Label>\n                        <Form.Control \n                            type='number'\n                            plaintext\n                            defaultValue={duration}\n                            readOnly\n                        />\n                    </Form.Group>\n                    <Form.Group controid='salary'>\n                        <Form.Label>Salary of Job</Form.Label>\n                        <Form.Control \n                            type='number'\n                            plaintext\n                            defaultValue={salary}\n                            readOnly\n                        />\n                    </Form.Group>\n                </Form>\n                <div className='col s12' style={{ margin: '10px' }}>\n                    <button className='btn waves-effect waves-light hoverable blue accent3'\n                    type='submit'\n                    onClick={() => createMe()}>\n                        <i className='material-icons right'>send</i>\n                        Edit\n                    </button>\n                </div>\n            </div>\n        )\n}\n\n    return(\n        <div>\n            <div>\n                {acceptInput()}\n            </div>\n            <div>\n                {renderDisplay()}\n            </div>\n            <div>\n                {goBack()}\n            </div>\n        </div>\n    )\n}\n\nexport default EditJob","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/ViewJob.js",["149"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Context from '../../Context'\nimport Navbar from './Navbar'\nimport axios from 'axios'\nimport Fuse from 'fuse.js'\nimport {Form} from 'react-bootstrap'\nimport classnames from 'classnames'\nimport {\n    InputLabel,\n    MenuItem,\n    FormControl,\n    Select,\n    makeStyles,\n    Typography,\n    Slider\n} from '@material-ui/core'\n\nconst AViewJob = () => {\n    const { store } = useContext(Context)\n    const [loader, setLoader] = useState(false)\n    const [jobs, setJobs] = useState(null)\n    const [backup, setBackup] = useState(null)\n    const [jobtype, setJobtype] = useState('')\n    const [salary, setSalary] = useState([0, 100])\n    const [duration, setDuration] = useState(null)\n    const [sortSal, setSortSal] = useState(null)\n    const [sortDur, setSortDur] = useState(null)\n    const [query, setQuery] = useState('')\n    const [apply, setApply] = useState(false)\n    const [ajob, setAjob] = useState(null)\n    const [sop, setSop] = useState('')\n    const [errors, setErrors] = useState({})\n\n    useEffect(() => {\n        async function timepass() {\n            if(loader) return\n            if (store.user !== undefined) {\n                const jobList = await axios.get('http://localhost:3000/jobs/viewjob')\n                setJobs(jobList.data.jobs)\n                setBackup(jobList.data.jobs)\n                setLoader(true)\n            }\n        }\n\n        timepass()\n    })\n\n    const displaySkill = (skill, sidx) => {\n        try {\n            if (skill.name.length === 0) return\n            return (\n                <div>\n                    <p>\n                        <b>{`Skill ${sidx + 1}: `}</b> {skill.name}\n                    </p>\n                </div>\n            )\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const displayJobs = (job, idx) => {\n        try {            \n            return (\n                <div>\n                    <hr />\n                    <p>\n                        <b>{`Job ${idx + 1} title: `}</b> {job.title}\n                    </p>\n                    <p>\n                        <b>{`by: `}</b> {job.name}\n                    </p>\n                    <p>\n                        <b>{`mail: `}</b> {job.email}\n                    </p>\n                    <p>\n                        <b>{`max applicants: `}</b> {job.applicants}\n                    </p>\n                    <p>\n                        <b>{`max positions: `}</b> {job.positions}\n                    </p>\n                    <div>\n                        {job.skills.map((skill, sidx) => (\n                            <div className='skill'>\n                                {displaySkill(skill, sidx)}\n                            </div>\n                        ))}\n                    </div>\n                    <p>\n                        <b>{`job type: `}</b> {job.jobtype}\n                    </p>\n                    <p>\n                        <b>{`job duration: `}</b> {job.duration}\n                    </p>\n                    <p>\n                        <b>{`salary: `}</b> {`$ ${job.salary}`}\n                    </p>\n                    <button\n                        style={{marginTop: '20px', marginLeft: '10px'}}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                        onClick={() => makeApplication(job)}\n                        >\n                        Apply\n                    </button>\n                </div>\n            )\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const makeApplication = (job) => {\n        setApply(true)\n        setAjob(job)\n        setErrors({})\n    }\n\n    const limitJobs = (job, idx) => {\n        if(duration === null) {\n            if (jobtype === '' && (job.salary > salary[0] && job.salary < salary[1])) {\n                return displayJobs(job, idx)\n            } else if( job.jobtype === jobtype && (job.salary > salary[0] && job.salary < salary[1])) {\n                return displayJobs(job, idx)\n            }\n        } else if(jobtype === '') {\n            if(job.duration < duration && (job.salary > salary[0] && job.salary < salary[1])){\n                return displayJobs(job, idx)\n            }\n        } else {\n            if(jobtype === job.jobtype && job.duration === duration && (job.salary > salary[0] && job.salary < salary[1])) {\n                return displayJobs(job, idx)\n            }\n        }\n    }\n\n    const nor = () => {\n        return (\n            <div className='row container'>\n                <form className='col s12'>\n                    <div className='row center'>\n                        {jobs.map((job, idx) => (\n                            <div className='job'>\n                                {limitJobs(job, idx)}\n                            </div>\n                        ))}\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\n    const formStyles = makeStyles((theme) => ({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120\n        },\n       selectEmpty: {\n           marginTop: theme.spacing(2)\n       } \n    }))\n\n    const slideStyles = makeStyles({\n        root: {\n            width: 300\n        }\n    })\n\n    const handleChange = (e, newVal) => {\n        setSalary(newVal)\n    }\n\n    const valuetext = val => {\n        return `$${val}`\n    }\n\n    const printSort = () => {\n        console.log('printSort')\n        if(sortSal) {\n            setJobs([...jobs.sort((a, b) => (a.salary > b.salary ? 1 : -1))])\n        } else if(!sortSal) {\n            setJobs([...jobs.sort((a, b) => (a.salary < b.salary ? 1 : -1))])\n        }\n\n        if(sortDur) {\n            setJobs([...jobs.sort((a, b) => (a.duration > b.duration ? 1 : -1))])\n        } else if(!sortDur) {\n            setJobs([...jobs.sort((a, b) => (a.duration < b.duration ? 1 : -1))])\n        }\n    }\n\n    const resetFilter = () => {\n        setSalary([0,100])\n        setJobtype('')\n        setDuration(null)\n    }\n    \n    const onSearch = currentTarget => {\n        const fuse = new Fuse(backup, {\n            keys: [\n                'title',\n            ]\n        })\n        setQuery(currentTarget)\n        if(query !== '')\n        {\n            console.log(fuse.search(query).map(item => item.item))\n            setJobs([...fuse.search(query).map(item => item.item)])\n        } else {\n            setJobs(backup)\n        }\n    }\n\n    const classes = slideStyles()\n    const dropDown = formStyles();\n\n    const renderDisplay = () => {\n        if (loader) {\n            return(\n                <div>\n                    <Navbar />\n                    <div className='container'>\n                        <div className='heading center'>\n                            <h2><b>Jobs</b></h2>\n                        </div>\n                        <div className='row'>\n                            <hr/>\n                            <h4>Filters</h4>\n                            <form noValidate onSubmit={e => e.preventDefault()}>\n                                <div className='job type'>\n                                    <FormControl className={dropDown.formControl}>\n                                        <InputLabel id='demo-simple-select-label'>\n                                            Job Type\n                                        </InputLabel>\n                                        <Select \n                                            labelId='demo-simple-select-label'\n                                            id='demo-simple-select'\n                                            value={jobtype}\n                                            onChange={e => setJobtype(e.target.value)}\n                                        >\n                                            <MenuItem value={'fulltime'}>Full Time</MenuItem>\n                                            <MenuItem value={'parttime'}>Part Time</MenuItem>\n                                            <MenuItem value={'work from home'}>Work From Home</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                                <div className='salary' style={{marginTop: '10px', marginLeft: '10px'}}>\n                                    <div className={classes.root}>\n                                        <Typography id='range-slider' gutterBottom>\n                                            Salary Range\n                                        </Typography>\n                                        <Slider\n                                            value={salary}\n                                            onChange={handleChange}\n                                            valueLabelDisplay='auto'\n                                            aria-labelledby='range-slider'\n                                            getAriaValueText={valuetext}\n                                        />\n                                    </div>\n                                </div>\n                                <div className='job type'>\n                                    <FormControl className={dropDown.formControl}>\n                                        <InputLabel id='demo-simple-select-label'>\n                                            Duration\n                                        </InputLabel>\n                                        <Select \n                                            labelId='demo-simple-select-label'\n                                            id='demo-simple-select'\n                                            value={duration}\n                                            onChange={e => setDuration(e.target.value)}\n                                        >\n                                            <MenuItem value={1}>1</MenuItem>\n                                            <MenuItem value={2}>2</MenuItem>\n                                            <MenuItem value={3}>3</MenuItem>\n                                            <MenuItem value={4}>4</MenuItem>\n                                            <MenuItem value={5}>5</MenuItem>\n                                            <MenuItem value={6}>6</MenuItem>\n                                            <MenuItem value={7}>7</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                            </form>\n                            <div className='row'>\n                                <button\n                                    style={{marginTop: '20px', marginLeft: '10px'}}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                                    onClick={() => resetFilter()}\n                                    >\n                                    Reset Filter\n                                </button>\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <hr />\n                            <h4>Sort By</h4>\n                            <p>Preference is given to Duration</p>\n                            <form noValidate onSubmit={e => e.preventDefault()}>\n                                <div className='row'>\n                                    <div className='sort salary'>\n                                        <FormControl className={dropDown.formControl}>\n                                            <InputLabel id='demo-simple-select-label'>\n                                                Salary\n                                            </InputLabel>\n                                            <Select \n                                                labelId='demo-simple-select-label'\n                                                id='demo-simple-select'\n                                                value={sortSal}\n                                                onChange={e => setSortSal(e.target.value)}\n                                            >\n                                                <MenuItem value={true}>Ascending</MenuItem>\n                                                <MenuItem value={false}>Descending</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                    <div className='sort duration'>\n                                        <FormControl className={dropDown.formControl}>\n                                            <InputLabel id='demo-simple-select-label'>\n                                                Duration\n                                            </InputLabel>\n                                            <Select \n                                                labelId='demo-simple-select-label'\n                                                id='demo-simple-select'\n                                                value={sortDur}\n                                                onChange={e => setSortDur(e.target.value)}\n                                            >\n                                                <MenuItem value={true}>Ascending</MenuItem>\n                                                <MenuItem value={false}>Descending</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </div>\n                            </form>\n                            <button\n                                    style={{marginTop: '20px', marginLeft: '10px'}}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                                    onClick={() => printSort()}\n                                    >\n                                    Sort\n                            </button>\n                        </div>\n                        <div className='row'>\n                            < hr />\n                            <form noValidate onSubmit={e => e.preventDefault()}>\n                                <div className='input-field col s12'>\n                                    <input \n                                        id='fuzzy'\n                                        type='text'\n                                        value={query}\n                                        onChange={e => onSearch(e.target.value)}\n                                    />\n                                    <label htmlFor='fuzzy'>Search</label>\n                                </div>\n                            </form>\n                        </div>\n                        {nor()}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    const submitMe = async () => {\n        try {   \n            console.log('here')\n            let res = await axios.post('http://localhost:5000/users/apply', {\n                title: ajob.title,\n                myEmail: store.user.email,\n                email: ajob.email,\n                status: 'Waiting',\n                sop\n            })\n            console.log(res)\n            if(res.status === 200){\n                console.log('Success')\n                setApply(false)\n                setErrors({})\n                setSop('')\n            } else if (res.data.sop){\n                setErrors({ sop: res.data.sop})\n            }else {\n                setErrors({ someError: res.data.someError })\n            }\n        } catch(err) {\n            console.log(err.message)\n        }\n    }\n\n    const renderApplication = () => {\n        if(loader) {\n            return(\n                <div className='container'>\n                    <div className='center'>\n                        <h2>Apply for Job</h2>\n                        <hr />\n                    </div>\n                    <Form>\n                        <Form.Group controid='title'>\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control \n                                type='text'\n                                plaintext\n                                defaultValue={ajob.title}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control \n                                type='text'\n                                plaintext\n                                defaultValue={ajob.name}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='email'>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control \n                                type='email'\n                                plaintext\n                                defaultValue={ajob.email}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='applicants'>\n                            <Form.Label>Max number of Applicants</Form.Label>\n                            <Form.Control \n                                type='number'\n                                plaintext\n                                defaultValue={ajob.applicants}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='positions'>\n                            <Form.Label>Max number of Positons</Form.Label>\n                            <Form.Control \n                                type='number'\n                                plaintext\n                                defaultValue={ajob.positions}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controlid='skills'>\n                            <Form.Label>Skills</Form.Label>\n                            {ajob.skills.map((skill, idx) => (\n                                <div className='skill'>\n                                    <input \n                                        type='text'\n                                        placeholder={`Skill #${idx + 1} name`}\n                                        value={skill.name}\n                                        readOnly\n                                    />\n                                </div>\n                            ))}\n                        </Form.Group>\n                        <Form.Group controid='job type'>\n                            <Form.Label>Job Type</Form.Label>\n                            <Form.Control \n                                type='text'\n                                plaintext\n                                defaultValue={ajob.jobtype}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='months'>\n                            <Form.Label>Duration of Job</Form.Label>\n                            <Form.Control \n                                type='number'\n                                plaintext\n                                defaultValue={ajob.duration}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='salary'>\n                            <Form.Label>Salary of Job</Form.Label>\n                            <Form.Control \n                                type='number'\n                                plaintext\n                                defaultValue={ajob.salary}\n                                readOnly\n                            />\n                        </Form.Group>\n                        <Form.Group controid='sop'>\n                            <Form.Label>Statement of Purpose</Form.Label>\n                            <Form.Control \n                                type='text'\n                                plaintext\n                                defaultValue={sop}\n                                className={classnames('', {invalid: errors.sop})}\n                                onChange={e => setSop(e.target.value)}\n                            />\n                            <span className='red-text'>{errors.sop}</span>\n                        </Form.Group>\n                    </Form>\n                    <button\n                        style={{margin: '10px'}}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                        onClick={() => setApply(false)}\n                        >\n                        Go Back\n                    </button>\n                    <button\n                        style={{margin: '10px'}}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        className={classnames(\"btn btn-large waves-effect waves-light hoverable blue accent-3\", {invalid: errors.someError})}\n                        onClick={() => submitMe()}\n                        >\n                        Submit\n                    </button>\n                    <span className='red-text'>{errors.someError}</span>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                {apply? renderApplication() : renderDisplay()}\n            </div>\n            <div>\n            </div>\n        </div>\n    )\n}\n\nexport default AViewJob","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/applicant/MyApplications.js",[],"/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/DeleteJob.js",["150"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Context from '../../Context'\nimport axios from 'axios'\nimport { Form } from 'react-bootstrap'\nimport classnames from 'classnames'\n\nconst DeleteJob = () => {\n    const { store } = useContext(Context)\n    const [loader, setLoader] = useState(false)\n    const [title, setTitle] = useState('')\n    const [back, setBack] = useState(false)\n    const [errors, setErrors] = useState({})\n\n    useEffect(() => {\n        if(loader) return\n        if(store.user !== undefined) {\n            setLoader(true)\n        }\n    })\n\n    const goBack = () => {\n        if(back) {\n            return <Redirect to='/viewjob'></Redirect>\n        }\n    }\n\n    const deleteMe = async () => {\n        try {\n            const res = await axios.post('http://localhost:5000/jobs/deletejob', {\n                title,\n                email: store.user.email\n            })\n            console.log(res)\n            if(res.status === 200) {\n                setBack(true)  \n                setErrors({})\n            } else if(res.data.title) {\n                setErrors({ title: res.data.title })\n            } else {\n                console.log(res.data.someError)\n                setErrors({ someError: res.data.someError })\n            }\n        } catch (err) {\n            console.log(err.message)\n        }\n    }\n\n    const acceptInput = () => {\n        if(loader) {\n            return (\n                <div className='container'>\n                    <Form>\n                        <Form.Group controlid='title'>\n                            <Form.Label>Title of Job</Form.Label>\n                            <Form.Control \n                                className={classnames('', { invalid: errors.title })}\n                                type='text'\n                                plaintext\n                                defaultValue={title}\n                                onChange={e => setTitle(e.target.value)}\n                            />\n                        </Form.Group>\n                        <span className='red-text'>{errors.title}</span>\n                    </Form>\n                    <button className='btn waves-effect waves-light hoverable blue accent3'\n                            onClick={() => setBack(true)}>\n                        Go Back\n                    </button>\n                    <button className='btn waves-effect waves-light hoverable blue accent3'\n                            onClick={() => deleteMe()}>\n                        Delete\n                    </button>\n                </div>\n            )\n        }\n    }\n\n\n    return(\n        <div>\n            {acceptInput()}\n            {goBack()}\n        </div>\n    )\n}\n\nexport default DeleteJob","/home/shivansh/Desktop/MERN-DASS-1/frontend/src/components/recruitor/MyApplicant.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":10,"column":11,"nodeType":"157","endLine":10,"endColumn":37},{"ruleId":"158","severity":1,"message":"159","line":10,"column":11,"nodeType":"157","endLine":10,"endColumn":37},{"ruleId":"158","severity":1,"message":"159","line":11,"column":11,"nodeType":"157","endLine":11,"endColumn":68},{"ruleId":"151","replacedBy":"160"},{"ruleId":"153","replacedBy":"161"},{"ruleId":"151","replacedBy":"162"},{"ruleId":"153","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":13,"column":3,"nodeType":"166","endLine":13,"endColumn":12,"suggestions":"167"},{"ruleId":"168","severity":1,"message":"169","line":79,"column":17,"nodeType":"157","endLine":82,"endColumn":52},{"ruleId":"170","severity":1,"message":"171","line":3,"column":10,"nodeType":"166","messageId":"172","endLine":3,"endColumn":14},{"ruleId":"170","severity":1,"message":"173","line":3,"column":16,"nodeType":"166","messageId":"172","endLine":3,"endColumn":29},{"ruleId":"164","severity":1,"message":"165","line":13,"column":3,"nodeType":"166","endLine":13,"endColumn":12,"suggestions":"174"},{"ruleId":"168","severity":1,"message":"169","line":41,"column":17,"nodeType":"157","endLine":44,"endColumn":52},{"ruleId":"170","severity":1,"message":"175","line":7,"column":10,"nodeType":"166","messageId":"172","endLine":7,"endColumn":19},{"ruleId":"170","severity":1,"message":"176","line":6,"column":9,"nodeType":"166","messageId":"172","endLine":6,"endColumn":13},{"ruleId":"170","severity":1,"message":"177","line":13,"column":5,"nodeType":"166","messageId":"172","endLine":13,"endColumn":15},{"ruleId":"170","severity":1,"message":"178","line":14,"column":5,"nodeType":"166","messageId":"172","endLine":14,"endColumn":11},{"ruleId":"170","severity":1,"message":"179","line":28,"column":12,"nodeType":"166","messageId":"172","endLine":28,"endColumn":18},{"ruleId":"170","severity":1,"message":"180","line":195,"column":19,"nodeType":"166","messageId":"172","endLine":195,"endColumn":22},{"ruleId":"164","severity":1,"message":"181","line":23,"column":5,"nodeType":"166","endLine":23,"endColumn":14,"suggestions":"182"},{"ruleId":"164","severity":1,"message":"181","line":27,"column":5,"nodeType":"166","endLine":27,"endColumn":14,"suggestions":"183"},{"ruleId":"170","severity":1,"message":"184","line":2,"column":10,"nodeType":"166","messageId":"172","endLine":2,"endColumn":18},{"ruleId":"164","severity":1,"message":"181","line":15,"column":5,"nodeType":"166","endLine":15,"endColumn":14,"suggestions":"185"},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["186"],["187"],["186"],["187"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [store, loader] as a second argument to the useEffect Hook.","Identifier",["188"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'Link' is defined but never used.","unusedVar","'BrowserRouter' is defined but never used.",["189"],"'TextField' is defined but never used.","'Form' is defined but never used.","'Typography' is defined but never used.","'Slider' is defined but never used.","'backup' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loader, store.user] as a second argument to the useEffect Hook.",["190"],["191"],"'Redirect' is defined but never used.",["192"],"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"193","fix":"195"},{"desc":"196","fix":"197"},{"desc":"196","fix":"198"},{"desc":"196","fix":"199"},"Add dependencies array: [store, loader]",{"range":"200","text":"201"},{"range":"202","text":"201"},"Add dependencies array: [loader, store.user]",{"range":"203","text":"204"},{"range":"205","text":"204"},{"range":"206","text":"204"},[513,513],", [store, loader]",[555,555],[1087,1087],", [loader, store.user]",[1291,1291],[624,624]]